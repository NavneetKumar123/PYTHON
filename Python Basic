{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30761,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"name=\"Navneet\"\nName=\"Kumar\"\n\nprint(name)\n#Both variable are different\nprint(Name)","metadata":{"execution":{"iopub.status.busy":"2024-09-11T06:34:24.653491Z","iopub.execute_input":"2024-09-11T06:34:24.653844Z","iopub.status.idle":"2024-09-11T06:34:24.677784Z","shell.execute_reply.started":"2024-09-11T06:34:24.653806Z","shell.execute_reply":"2024-09-11T06:34:24.676853Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Navneet\nKumar\n","output_type":"stream"}]},{"cell_type":"code","source":"#Indentation\nage=32\nif age>30:\n    #This print is in if block\n    print(age)\n#This print is outside of if block because of identation\nprint(age)","metadata":{"execution":{"iopub.status.busy":"2024-09-11T06:35:44.635063Z","iopub.execute_input":"2024-09-11T06:35:44.635964Z","iopub.status.idle":"2024-09-11T06:35:44.641135Z","shell.execute_reply.started":"2024-09-11T06:35:44.635921Z","shell.execute_reply":"2024-09-11T06:35:44.640136Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"32\n32\n","output_type":"stream"}]},{"cell_type":"code","source":"#Line continuation\n#Use a backslash(\\) to continue a statement to the next line\ntotal=1+2+3+4+5+6+7+\\\n4+5+6\n\nprint(total)","metadata":{"execution":{"iopub.status.busy":"2024-09-11T06:39:40.919803Z","iopub.execute_input":"2024-09-11T06:39:40.920682Z","iopub.status.idle":"2024-09-11T06:39:40.925731Z","shell.execute_reply.started":"2024-09-11T06:39:40.920639Z","shell.execute_reply":"2024-09-11T06:39:40.924663Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"43\n","output_type":"stream"}]},{"cell_type":"code","source":"#Multiple statement on a single line\n#use semicoloumn (;) to use multipe variable in single line\nx=5;y=10;z=x+y\nprint(z)","metadata":{"execution":{"iopub.status.busy":"2024-09-11T06:51:33.462665Z","iopub.execute_input":"2024-09-11T06:51:33.463082Z","iopub.status.idle":"2024-09-11T06:51:33.468409Z","shell.execute_reply.started":"2024-09-11T06:51:33.463044Z","shell.execute_reply":"2024-09-11T06:51:33.467455Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"15\n","output_type":"stream"}]},{"cell_type":"code","source":"##Understand Semnatics in python\n#variable assignment\nage=32 ##it automatically says that the variable type is integer\nname=\"krish\" ##it automatically says that the variable type is string\ntype(age)\ntype(name)","metadata":{"execution":{"iopub.status.busy":"2024-09-11T09:17:48.460389Z","iopub.execute_input":"2024-09-11T09:17:48.461085Z","iopub.status.idle":"2024-09-11T09:17:48.469194Z","shell.execute_reply.started":"2024-09-11T09:17:48.461044Z","shell.execute_reply":"2024-09-11T09:17:48.468163Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"str"},"metadata":{}}]},{"cell_type":"code","source":"##Type Inference\nvariable=10\nprint(type(variable))\nvariable=\"Navneet\"\nprint(type(variable))","metadata":{"execution":{"iopub.status.busy":"2024-09-11T09:25:36.400078Z","iopub.execute_input":"2024-09-11T09:25:36.400563Z","iopub.status.idle":"2024-09-11T09:25:36.407103Z","shell.execute_reply.started":"2024-09-11T09:25:36.400518Z","shell.execute_reply":"2024-09-11T09:25:36.405861Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<class 'int'>\n<class 'str'>\n","output_type":"stream"}]},{"cell_type":"code","source":"##code examples of identation\nif True:\n    print(\"correct indentation\")\n    if False:\n        print(\"This one print\")\n    print(\"this will print\")\nprint(\"outside the if block\")    ","metadata":{"execution":{"iopub.status.busy":"2024-09-11T09:34:23.784491Z","iopub.execute_input":"2024-09-11T09:34:23.784904Z","iopub.status.idle":"2024-09-11T09:34:23.791069Z","shell.execute_reply.started":"2024-09-11T09:34:23.784868Z","shell.execute_reply":"2024-09-11T09:34:23.789997Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"correct indentation\nthis will print\noutside the if block\n","output_type":"stream"}]},{"cell_type":"code","source":"# Declaring and assigning variables\nage=23\nheight=5.10\nname=\"kirish\"\n\n#Printing the variable\nprint(\"age :\",age)\nprint(\"height :\",height)\nprint(\"Name :\",name)","metadata":{"execution":{"iopub.status.busy":"2024-09-11T09:52:20.710712Z","iopub.execute_input":"2024-09-11T09:52:20.711131Z","iopub.status.idle":"2024-09-11T09:52:20.718300Z","shell.execute_reply.started":"2024-09-11T09:52:20.711087Z","shell.execute_reply":"2024-09-11T09:52:20.716987Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"age : 23\nheight : 5.1\nName : kirish\n","output_type":"stream"}]},{"cell_type":"code","source":"# Naming convention\n# variable names should be descriptive\n##They must start with a letter or an  '_' and contains letter,numbers and underscores\n###Variable names case sensitive\n\n\n\n#valid Variable names\nfirst_name=\"Navneet\"\nlast_name=\"Kumar\"\n\n\n# Invalid variable names\n\n2age=32\n@name=","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## case sensitivity\nname=\"navneet\"\nName=\"kumar\"\n\nname==Name","metadata":{"execution":{"iopub.status.busy":"2024-09-11T10:17:37.174452Z","iopub.execute_input":"2024-09-11T10:17:37.175474Z","iopub.status.idle":"2024-09-11T10:17:37.182092Z","shell.execute_reply.started":"2024-09-11T10:17:37.175413Z","shell.execute_reply":"2024-09-11T10:17:37.181019Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"False"},"metadata":{}}]},{"cell_type":"code","source":"#understanding variable types\n#Python is dynamically typed ,type of variable is determined at runtime\nage=25 ##int\nheight=6.1 ##float\nname=\"navneet\" ## str\nis_student=True ##bool","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Type checking and conversion\nage=25\nprint(type(age))\n\n# Type conversion\nage_str=str(age)\nprint(age_str)\nprint(type(age_str))","metadata":{"execution":{"iopub.status.busy":"2024-09-11T10:27:06.662225Z","iopub.execute_input":"2024-09-11T10:27:06.662645Z","iopub.status.idle":"2024-09-11T10:27:06.668710Z","shell.execute_reply.started":"2024-09-11T10:27:06.662602Z","shell.execute_reply":"2024-09-11T10:27:06.667596Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"<class 'int'>\n25\n<class 'str'>\n","output_type":"stream"}]},{"cell_type":"code","source":"#Dynamic Typing \n## Python allows the type of variable to change as the program executes\n\nvar=10\nprint(var,type(var))\n\nvar=\"hello\"\nprint(var,type(var))\n\nvar=3.14\nprint(var,type(var))","metadata":{"execution":{"iopub.status.busy":"2024-09-11T10:37:09.944572Z","iopub.execute_input":"2024-09-11T10:37:09.945030Z","iopub.status.idle":"2024-09-11T10:37:09.951344Z","shell.execute_reply.started":"2024-09-11T10:37:09.944945Z","shell.execute_reply":"2024-09-11T10:37:09.950315Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"10 <class 'int'>\nhello <class 'str'>\n3.14 <class 'float'>\n","output_type":"stream"}]},{"cell_type":"code","source":"#input\nage=int(input(\"what is the age\"))\nprint(age,type(age))","metadata":{"execution":{"iopub.status.busy":"2024-09-11T11:38:41.656394Z","iopub.execute_input":"2024-09-11T11:38:41.657375Z","iopub.status.idle":"2024-09-11T11:38:46.324404Z","shell.execute_reply.started":"2024-09-11T11:38:41.657311Z","shell.execute_reply":"2024-09-11T11:38:46.323132Z"},"trusted":true},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdin","text":"what is the age 23\n"},{"name":"stdout","text":"23 <class 'int'>\n","output_type":"stream"}]},{"cell_type":"code","source":"## Simple calculator\nnum1=int(input(\"Enter First number :\"))\nnum2=int(input(\"Enter Second number :\"))\n\nsum=num1+num2\ndiff=num1-num2\nmulti=num1*num2\ndivide=num1/num2\n\n\nprint(\"sum :\",sum)\nprint(\"diff :\",diff)\nprint(\"multi :\",multi)\nprint(\"divide :\",divide)","metadata":{"execution":{"iopub.status.busy":"2024-09-11T11:46:00.840992Z","iopub.execute_input":"2024-09-11T11:46:00.841412Z","iopub.status.idle":"2024-09-11T11:46:06.858903Z","shell.execute_reply.started":"2024-09-11T11:46:00.841373Z","shell.execute_reply":"2024-09-11T11:46:06.857672Z"},"trusted":true},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdin","text":"Enter First number : 50\nEnter Second number : 10\n"},{"name":"stdout","text":"sum : 60\ndiff : 40\nmulti : 500\ndivide : 5.0\n","output_type":"stream"}]},{"cell_type":"code","source":"#Data types\n# 1. Integer data type\nage=35\nprint(type(age))","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:10:39.404716Z","iopub.execute_input":"2024-09-12T06:10:39.405513Z","iopub.status.idle":"2024-09-12T06:10:39.437301Z","shell.execute_reply.started":"2024-09-12T06:10:39.405471Z","shell.execute_reply":"2024-09-12T06:10:39.436109Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"<class 'int'>\n","output_type":"stream"}]},{"cell_type":"code","source":"# 2. Floating point datatype\nheight=5.11\nprint(height)\nprint(type(height))","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:11:42.799360Z","iopub.execute_input":"2024-09-12T06:11:42.799791Z","iopub.status.idle":"2024-09-12T06:11:42.806453Z","shell.execute_reply.started":"2024-09-12T06:11:42.799732Z","shell.execute_reply":"2024-09-12T06:11:42.805336Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"5.11\n<class 'float'>\n","output_type":"stream"}]},{"cell_type":"code","source":"# 3. String data type\nname=\"kirish\"\nprint(name)\nprint(type(name))","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:12:31.366330Z","iopub.execute_input":"2024-09-12T06:12:31.367131Z","iopub.status.idle":"2024-09-12T06:12:31.372714Z","shell.execute_reply.started":"2024-09-12T06:12:31.367088Z","shell.execute_reply":"2024-09-12T06:12:31.371413Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"kirish\n<class 'str'>\n","output_type":"stream"}]},{"cell_type":"code","source":"# 4.boolean datatype\na=10\nb=10\nprint(type(a==b))","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:13:33.857392Z","iopub.execute_input":"2024-09-12T06:13:33.857818Z","iopub.status.idle":"2024-09-12T06:13:33.863847Z","shell.execute_reply.started":"2024-09-12T06:13:33.857763Z","shell.execute_reply":"2024-09-12T06:13:33.862762Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'bool'>\n","output_type":"stream"}]},{"cell_type":"code","source":"## Arithmethic Operation\n\na=10\nb = 5\n\nadd_result=a+b  #addiiton\nsub_result=a-b  #substraction \nmult_result=a*b #multiplication\ndiv_result=a/b  #division\nfloor_div_result=a//b ## floor division\nmodulus_result=a%b #modulus operation\n\nexponent_result=a**b ## Exponentiation\n\n\nprint(add_result)\nprint(sub_result)\nprint(mult_result)\nprint(div_result)\nprint(floor_div_result)\nprint(modulus_result)\nprint(exponent_result)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:47:00.806221Z","iopub.execute_input":"2024-09-12T06:47:00.807015Z","iopub.status.idle":"2024-09-12T06:47:00.814533Z","shell.execute_reply.started":"2024-09-12T06:47:00.806970Z","shell.execute_reply":"2024-09-12T06:47:00.813512Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"15\n5\n50\n2.0\n2\n0\n100000\n","output_type":"stream"}]},{"cell_type":"code","source":"## Comparison Operators\n## == Equal to\na=10\nb=10\n\na==b","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:47:26.313576Z","iopub.execute_input":"2024-09-12T06:47:26.314005Z","iopub.status.idle":"2024-09-12T06:47:26.322412Z","shell.execute_reply.started":"2024-09-12T06:47:26.313962Z","shell.execute_reply":"2024-09-12T06:47:26.321255Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"code","source":"str1=\"Krish\"\nstr2=\"Krish\"\n\nstr1==str2","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:47:50.518655Z","iopub.execute_input":"2024-09-12T06:47:50.519077Z","iopub.status.idle":"2024-09-12T06:47:50.525975Z","shell.execute_reply.started":"2024-09-12T06:47:50.519039Z","shell.execute_reply":"2024-09-12T06:47:50.524896Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"code","source":"## Not Equal to !=\nstr1!=str2","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:48:04.464474Z","iopub.execute_input":"2024-09-12T06:48:04.465218Z","iopub.status.idle":"2024-09-12T06:48:04.471509Z","shell.execute_reply.started":"2024-09-12T06:48:04.465174Z","shell.execute_reply":"2024-09-12T06:48:04.470480Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"False"},"metadata":{}}]},{"cell_type":"code","source":"# greater than >\n\nnum1=45\nnum2=55\n\nnum1>num2","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:48:19.309779Z","iopub.execute_input":"2024-09-12T06:48:19.310721Z","iopub.status.idle":"2024-09-12T06:48:19.317176Z","shell.execute_reply.started":"2024-09-12T06:48:19.310677Z","shell.execute_reply":"2024-09-12T06:48:19.315998Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"False"},"metadata":{}}]},{"cell_type":"code","source":"## less than <\n\nprint(num1<num2)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:48:30.528899Z","iopub.execute_input":"2024-09-12T06:48:30.529921Z","iopub.status.idle":"2024-09-12T06:48:30.535176Z","shell.execute_reply.started":"2024-09-12T06:48:30.529875Z","shell.execute_reply":"2024-09-12T06:48:30.534042Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"True\n","output_type":"stream"}]},{"cell_type":"code","source":"#greater than or equal to\nnumber1=45\nnumber2=45\n\nprint(number1>=number2)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:48:42.321040Z","iopub.execute_input":"2024-09-12T06:48:42.321707Z","iopub.status.idle":"2024-09-12T06:48:42.327137Z","shell.execute_reply.started":"2024-09-12T06:48:42.321664Z","shell.execute_reply":"2024-09-12T06:48:42.325971Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"True\n","output_type":"stream"}]},{"cell_type":"code","source":"#less than or equal to\nnumber1=44\nnumber2=45\n\nprint(number1<=number2)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:48:56.097381Z","iopub.execute_input":"2024-09-12T06:48:56.097803Z","iopub.status.idle":"2024-09-12T06:48:56.103391Z","shell.execute_reply.started":"2024-09-12T06:48:56.097740Z","shell.execute_reply":"2024-09-12T06:48:56.102219Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"True\n","output_type":"stream"}]},{"cell_type":"code","source":"#Logical Operators\n## And ,Not,OR\nX=True\nY=True\n\nresult =X and Y\nprint(result)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:49:38.719392Z","iopub.execute_input":"2024-09-12T06:49:38.720249Z","iopub.status.idle":"2024-09-12T06:49:38.725745Z","shell.execute_reply.started":"2024-09-12T06:49:38.720194Z","shell.execute_reply":"2024-09-12T06:49:38.724607Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"True\n","output_type":"stream"}]},{"cell_type":"code","source":"## OR\nX=False\nY=False\n\nresult =X or Y\nprint(result)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:50:28.092064Z","iopub.execute_input":"2024-09-12T06:50:28.092485Z","iopub.status.idle":"2024-09-12T06:50:28.099098Z","shell.execute_reply.started":"2024-09-12T06:50:28.092444Z","shell.execute_reply":"2024-09-12T06:50:28.097621Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"False\n","output_type":"stream"}]},{"cell_type":"code","source":"# Not operator\nX=False\nnot X","metadata":{"execution":{"iopub.status.busy":"2024-09-12T06:50:39.268574Z","iopub.execute_input":"2024-09-12T06:50:39.269000Z","iopub.status.idle":"2024-09-12T06:50:39.276005Z","shell.execute_reply.started":"2024-09-12T06:50:39.268959Z","shell.execute_reply":"2024-09-12T06:50:39.274814Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"code","source":"#if statement\n#Evaluates the condition and execute the block of code within it if the condition is true.\nage=20\nif age>=18:\n    print(\"hello\")","metadata":{"execution":{"iopub.status.busy":"2024-09-12T09:16:00.686032Z","iopub.execute_input":"2024-09-12T09:16:00.686523Z","iopub.status.idle":"2024-09-12T09:16:00.702749Z","shell.execute_reply.started":"2024-09-12T09:16:00.686476Z","shell.execute_reply":"2024-09-12T09:16:00.701257Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"hello\n","output_type":"stream"}]},{"cell_type":"code","source":"#else statement\n#The else statement executes a block of code if the condition in the if statement is false\nage=16\nif age>=18:\n    print(\"you are eligible for voting\")\nelse:\n    print(\"you are minor\")","metadata":{"execution":{"iopub.status.busy":"2024-09-12T09:20:03.858929Z","iopub.execute_input":"2024-09-12T09:20:03.859417Z","iopub.status.idle":"2024-09-12T09:20:03.866933Z","shell.execute_reply.started":"2024-09-12T09:20:03.859373Z","shell.execute_reply":"2024-09-12T09:20:03.865514Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"you are minor\n","output_type":"stream"}]},{"cell_type":"code","source":"#elif statement\n#The elif statement allows you to check multiple condition.It stands for \"else if\".\nage=10\nif(age<13):\n    print(\"you are child\")\nelif age<18:\n    print(\"you are teenager\")\nelse:\n    print(\"you are an adult\")","metadata":{"execution":{"iopub.status.busy":"2024-09-12T09:24:21.423199Z","iopub.execute_input":"2024-09-12T09:24:21.424063Z","iopub.status.idle":"2024-09-12T09:24:21.430893Z","shell.execute_reply.started":"2024-09-12T09:24:21.424014Z","shell.execute_reply":"2024-09-12T09:24:21.429757Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"you are child\n","output_type":"stream"}]},{"cell_type":"code","source":"#Nested conditional statements\n#you can place one or more if, elif, or else statements inside another if,elif, or else statement to create nested conditional statements.\nnum=int(input(\"enter the number\"))\nif num>0:\n    print(\"the number is positive\")\n    if num%2==0:\n        print(\"the number is even\")\n    else:\n        print(\"The number is odd\")\nelse:\n    print(\"the number is zero or negative\")","metadata":{"execution":{"iopub.status.busy":"2024-09-12T09:33:50.448503Z","iopub.execute_input":"2024-09-12T09:33:50.448969Z","iopub.status.idle":"2024-09-12T09:33:55.897415Z","shell.execute_reply.started":"2024-09-12T09:33:50.448929Z","shell.execute_reply":"2024-09-12T09:33:55.896150Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdin","text":"enter the number 2\n"},{"name":"stdout","text":"the number is positive\nthe number is even\n","output_type":"stream"}]},{"cell_type":"code","source":"#Determine if a year is a leap year using nested condition statement\nyear=int(input(\"Enter the year\"))\nif year%4==0:\n    if year%100==0:\n        if year%400==0:\n            print(year,\"is a leap year\")\n        else:\n            print(year,\"not a leap year\")\n    else:\n        print(year,\"is a leap year\")\nelse:\n    print(year,\"is not a leap year\")","metadata":{"execution":{"iopub.status.busy":"2024-09-12T09:51:22.658865Z","iopub.execute_input":"2024-09-12T09:51:22.659323Z","iopub.status.idle":"2024-09-12T09:51:26.820943Z","shell.execute_reply.started":"2024-09-12T09:51:22.659282Z","shell.execute_reply":"2024-09-12T09:51:26.819640Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdin","text":"Enter the year 2023\n"},{"name":"stdout","text":"2023 is not a leap year\n","output_type":"stream"}]},{"cell_type":"code","source":"#,calculate the sum of first N natural numbers using a while and for loop\n# 1. While loop\nn=10\nsum=0\ncount=1\nwhile count<=n:\n    sum=sum+count\n    count=count+1\n    print(\"sum of first 10 natural number\",sum)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T12:06:39.620042Z","iopub.execute_input":"2024-09-12T12:06:39.620469Z","iopub.status.idle":"2024-09-12T12:06:39.626582Z","shell.execute_reply.started":"2024-09-12T12:06:39.620430Z","shell.execute_reply":"2024-09-12T12:06:39.625422Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"sum of first 10 natural number 1\nsum of first 10 natural number 3\nsum of first 10 natural number 6\nsum of first 10 natural number 10\nsum of first 10 natural number 15\nsum of first 10 natural number 21\nsum of first 10 natural number 28\nsum of first 10 natural number 36\nsum of first 10 natural number 45\nsum of first 10 natural number 55\n","output_type":"stream"}]},{"cell_type":"code","source":"# 2.for loop\nn=10\nsum=0\ncount=1\nfor i in range(11):\n    sum=sum+i\n    print(sum)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T12:07:40.044948Z","iopub.execute_input":"2024-09-12T12:07:40.045386Z","iopub.status.idle":"2024-09-12T12:07:40.054052Z","shell.execute_reply.started":"2024-09-12T12:07:40.045341Z","shell.execute_reply":"2024-09-12T12:07:40.052443Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"0\n1\n3\n6\n10\n15\n21\n28\n36\n45\n55\n","output_type":"stream"}]},{"cell_type":"code","source":"#prime numbers betwwen 1 and 100\nfor num in range(1,101):\n    if num>1:\n        for i in range(2,num):\n            if num%i==0:\n                break\n        else:\n            print(num)","metadata":{"execution":{"iopub.status.busy":"2024-09-12T16:51:26.693828Z","iopub.execute_input":"2024-09-12T16:51:26.694408Z","iopub.status.idle":"2024-09-12T16:51:26.704343Z","shell.execute_reply.started":"2024-09-12T16:51:26.694350Z","shell.execute_reply":"2024-09-12T16:51:26.702957Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-09-12T16:51:53.316765Z","iopub.execute_input":"2024-09-12T16:51:53.317884Z","iopub.status.idle":"2024-09-12T16:51:53.324746Z","shell.execute_reply.started":"2024-09-12T16:51:53.317831Z","shell.execute_reply":"2024-09-12T16:51:53.323246Z"},"trusted":true},"execution_count":3,"outputs":[{"traceback":["\u001b[0;36m  Cell \u001b[0;32mIn[3], line 1\u001b[0;36m\u001b[0m\n\u001b[0;31m    git init\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (2830201818.py, line 1)","output_type":"error"}]}]}